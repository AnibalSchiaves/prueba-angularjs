
https://docs.angularjs.org/tutorial
-----------------------------------

NOTA: LO EXPLICADO ACÁ SE CORRESPONDE CON LO HECHO EN /home/anibal/vs-workspace/prueba-angularjs

- ng-app -> para marcar el elemento raiz del html donde empezará a funcionar nuestra aplicación de angularjs.

- {{expression}} -> se denomina binding y se utiliza para indicar a angularjs que debe reeplazar dicho contenido por el resultado de la expresión, la cual será evaluada en el contexto del alcance del modelo actual (current model scope). Además si hay cambios en el valor de la expresión angularjs se ocupara de actualizar el dom con dichos cambios.

- ng-app="nombreModuloPrincipal" -> acá usamos la directiva ng-app para marcar el elemento raiz y además indicar cual es el modulo principal de la aplicación

- declarar un modulo -> si queremos declarar el módulo 'appModule' entonces agregamos el javascript
	var appModule = angular.module("appModule", []);

- controller: es el elemento de angularjs que actua de contexto para el cual el binding será evaluado y también nos prové de la lógica y comportamiento asociado a nuestra vista o template.

- declarar un controller -> si por ejemplo queremos declarar un controlador CtrlPrincipal entonces agregamos el js
	appModule.controller('CtrlController', function CtrlPrincipal($scope) {
		...
		$scope.mensaje = "Un mensaje de ejemplo";
		...
	});	

- ng-controller="CtrlPrincipal" -> con la directiva ngController podemos marcar el tag a partir del cual entrará en juego el controlador CtrlPrincipal y con el todo el modelo de datos que contiene. En este caso podriamos, dentro del contexto de CtrlPrincipal utilizar la expresión {{mensaje}} para mostrar el texto que contiene la variable del modelo definida como 'mensaje'.

- component: es el elemento en angularjs que nos permite juntar un templete y un controller para formar un componente reutilizable y que puede ser añadido a otras vistas mediante el tag que le asignemos al mismo. Un elemento similar pero más avanzado son las directivas.

- declarar un component -> si por ejemplo queremos declarar el componente saludo en el modulo appModulo agregamos el js:
	appModulo.component('saludo', {
		template: 'Hola {{$ctrl.user}}!!}}
		controller: Saludo() {
			this.user = 'Mundo';
		}
	});

- para convertir la aplicación para que sea una aplicación de node se debe:
	- ejecutamos: 
		- npm init (confirmamos las opciones por defecto)
		- npm install angular@1.8
		- npm install --save-dev http-server
		- npm install --save-dev cpx
	- creamos la carpeta lib
	- agregamos lo siguientes líneas a la sección de script de package.json:
		- "copy-libs": "cpx \"node_modules/{angular,angular-*}/**/*\" lib -C"
		- "postinstall": "npm run copy-libs"
		- "prestart": "npm install"
		- "start": "http-server . -a localhost -p 8000 -c-1"

- declarar un component con modulo propio -> si queremos declarar un componente en un modulo propio lo que vamos a hacer es crear una carpeta para el componente, en nuestro ejemplo person-list
Allí creamos el archivo person-list.component.js con el siguiente código:
	angular.module('personListModule', []);
	angular.module('personListModule')
		.component('personList', {
			templateUrl: 'person-list/person-list.template.html',
			controller: function PersonListController() {
					this.personas = [
						"Anibal Schiaves",
						"Ana María Cavallo",
						"Darío Pedonesi"
					];
			}
		});
También creamos el template (person-list.template.html) para dicho componente dentro de la carpeta indicada:
	<div>
    	<h3>Lista de Personas</h3>
		<div>--aquí va la lista de personas--</div>
    <div>
Por el momento está incompleto el template. Finalmente tenemos que agregar el modulo personListModule como dependencia de nuestro modulo principal, para ello modificamos la declaración del modulo appModule en app.js de la siguiente manera:
	var appModule = angular.module('appModule', ['personListModule']);
Un detalle importante es que en el archivo index.html tenemos que agregar el script de nuestro nuevo modulo previo al script del modulo principal:
	...
	<script src="person-list/person-list.component.js"></script>
    <script src="app.js"></script>
	...

- ng-repeat -> es la directiva de angularjs que se utiliza para hacer repetitivo un determinado fragmento del html. Supongamos que queremos repetir el elemento <li> dentro de una lista <ul> para mostrar nombres de personas, entonces agregamos el siguiente html:
	<ul>
		<li ng-repeat="persona in $ctrl.personas">
			{{persona}}
		</li>
	</ul>
	donde en el controller debemos tener un array de nombres de personas (variable personas)

- ng-model -> con esta directiva podemos hacer lo que se denomina data-binding, es decir asociar el valor de un determinada control en el template a una propiedad del controller. Por ejemplo podemos asociar un input con una propiedad del scope del controller que se llame query agregando el siguiente html
	<input type="text" ng-model="$ctrl.query">
luego, podemos utilizar dicha propiedad como filtro para la expresión que usamos en el ng-repeat y que dicho filtro se ejecute instantaneamente al cambiar el valor de la propiedad, ejemplo:
	<li ng-repeat="persona in personas | filter:$ctrl.query>

- filter -> función que se utiliza para filtrar un array mediante el valor de una expresión, en el ejemplo anterior utilizamos filter para filtrar un array de nombres de personas por aquellos que contengan un determinado texto (ingresado previamente en un input)

- orderBy -> función se utiliza para ordernar un array de objetos por alguno de sus atributos o, si es un array de primitivos, ordenarlos por sus valores. Por ejemplo podemos definir una nueva propiedad en el controller y unirla mediante databind a un control select de la siguiente manera:
	<select ng-model="$ctrl.sort">
		<option value="toString()">Ascendente</option>
		<option value="-toString()">Descendente</option>
	</select>
Luego en la directiva ng-repeat podemos usar la funcion orderBy para ordenar por dicha propiedad:
	<li ng-repeat="persona in personas | filter:$ctrl.query | orderBy:$ctrl.sort>
Un dato importante es que tenemos que darle un valor por defecto a la propiedad sort en el controller, para que de esta forma el select se muestre preseteado con alguno de sus opciones y que pueda aplicarse un ordenamiento inicial, ejemplo:
	this.sort = "toString()";
Si esto no se hace, angularjs por defecto agregará un valor vacío al select y el ordenamiento será el natural del array (con un array de string igualmente lo ordena alfabeticamente).

- $http -> servicio nativo de angularjs para realizar peticiones ajax. Dicho servicio se injecta en el componente que necesitemos usar vía injección de dependencia, para esto tenemos que indicarlo exactamente con notación $http en el constructor de nuestro componente. En este caso vamos a utilizarlo en nuestro PersonListController, para lo cual debemos rescribir lo que indicamos en la propiedad controller (del objeto que crea nuestro componente personList) de la siguiente manera:
	controller: ['$http', 
		function PersonListController($http) {
			this.personas = [];

			$http.get("person-list/data.json").then((response) => {
				this.personas = response.data;
			});

			this.sort = "toString()";
		}
	]
Aquí vemos que luego se utiliza la función get del servicio para realizar la petición y asignamos la respuesta a nuestra propiedad personas. Un detalle importante es que, para evitar proplemas a la hora de minificar nuestro código y evitar que se cambie la notación $http (lo cual haría que la injección de dependencia deje de funcionar), pasamos a la popiedad controller un array, donde el primer elemento es el string '$http' y nuestro segundo elemento es la función propiamente dicha con $http en la declaración de parámetros.

- ng-src -> directiva para utilizar en reemplazo del atributo estandar src y de esa forma poder hacer referencia a una expresión evaluada mediante angularjs. Vamos a agregar al template de person-list un tag img que hará referencia a la imagen de la persona, para ello modificamos el contenido del elemento li que tiene el ng-repeat por el siguiente:
	<h4>
		<img ng-src="{{$ctrl.formatAsImg(person)}}" height="40px"/> {{person}}
	</h4>
Vemos que la expresión usada es {{$ctrl.formatAsImg(person)}}, allí se invoca a una función del scope llamada formatAsImg que toma el nombre de la persona y devuelve el path a la imagen asociada.

------- hasta aquí incluido en commit "templating, binding, components, controllers" -------

- ngRoute -> módulo que nos permite definir rutas a nuestra aplicación de angularjs de manera de poder navegar por la misma. Para poder hacer uso de este modulo vamos a hacer algunas adaptaciones primero.
Agregamos la dependencia de ng-route a nuestro package.json dado que es un módulo que no viene por defecto junto al core de angularjs:

	npm install angular-route@1.8

Añadimos a nuestro index.html el script del modulo (que al hacer install, npm nos lo deja disponible dentro de la carpeta lib), lo hacemos debajo del script de angular.js:
	
	<script src="lib/angular-route/angular-route.min.js"></script>

Finalmente, indicamos que nuestro módulo tiene una dependencia con ngRoute. Esto lo hacemos en la declaración del modulo principal de nuestra aplicación, en el archivo app.js:
	
	var appModule = angular.module('appModule', ['personListModule', 'ngRoute']);

- $routeProvider -> es el provider que nos brinda ngRoute para configurar las rutas de nuestra aplicación. Allí indicaremos que template debe responder a cada ruta de nuestra aplicación. Dicha definición la haremos en un archivo separado, al cual llamaremos app.config.js. El contenido del mismo será:

	angular.module('appModule')
		.config(['$routeProvider', function config($routeProvider) {
			$routeProvider
				.when('/personas', {
					template: '<person-list></person-list>'
				})
				.when('/personas/:id', {
					template: '<person-detail></person-detail>'
				})
				.otherwise('/personas');
		}]);

Allí definimos dos rutas, '/personas' renderizará nuestro componente person-list y '/personas/:id' nuestro componente (todavía no creado) person-detail.
Además debemos agregar la referencia a dicho script en nuestro index.html para que pueda ejecutarse. Lo ponemos debajo de la referencia a app.js:

	<script src="app.config.js"></script>

Comprobaremos ahora que al levantar nuestra aplicación automáticamente nos redirije a la url 'http://localhost:7000/#!/personas', eso lo hace porque definimos la url '/personas' como la default. Además agrega #!, lo cual es la secuencia de caracteres que utiliza angularjs a partir de la cual considerará el resto como la url definida en $routeProvider.

- ng-view -> es la directiva que nos provee ngRoute para indicar el elemento del html donde injectará el template que corresponda a la url actual de la aplicación. Vamos a modificar nuestro index.html para reemplazar el uso directo del componente person-list para un div con la directiva ng-view:

	<div ng-view></div>

Vemos que, al ejecutar la aplicación, la misma seguirá viendose igual, pero ahora la renderización de person-list se hace por la url.
Para corrobar que el ruteo funciona vamos a crear un nuevo componente prácticamente vacío para renderizar person-detail. Creamos la carpeta person-detail y dentro de esta el archivo person-deatil.component.js con el siguiente código:

	angular.module('personDetailModule', []);

	angular.module('personDetailModule')
		.component('personDetail', {
			template: '<p>acá va el detalle de la persona</p>',
			controller: function personDetail() {
			}
		});

Además, en nuestro modulo principal agregamos la dependencia con el nuevo modulo creado para el componente personDetail, modificamos la declaración de appModule de la siguiente manera:

	var appModule = angular.module('appModule', ['personListModule', 'personDetailModule', 'ngRoute']);

También agregamos el nuevo script del módulo en nuestro index.html debajo del script de person-list:

	<script src="person-detail/person-detail.component.js"></script>

Finalmente, para corroborar que el ruteo se realice vamos a agregar una nueva función a controller de person-list, esto lo hacemos en person-list.component.js dentro de la función personListController:

	this.formatAsId = function(nombre) {
		return nombre.replace(/ /g, "").normalize('NFD').replace(/[\u0300-\u036f]/g,"").toLowerCase();
	}

Y modificamos el template person-list.template.html para agregar un link a la ruta personas/:{id}, para ello encerramos el <h4> con un tag <a> de la siguiente manera:

	<a href="#!/personas/{{$ctrl.formatAsId(person)}}">
		<h4>
			<img ng-src="{{$ctrl.formatAsImg(person)}}" height="40px"/> {{person}}
		</h4>
	</a>

Vemos ahora que al hacer click en la imagen o en el nombre de la persona nos redirije a la url 'http://localhost:7000/#!/personas/{id}', renderizando nuestro nuevo componente.

- $routeParams -> es el service que nos provee el módulo ngRoute para acceder a los parámetros de la url actual. Vamos a modificar el componente person-detail para hacer uso de dicho servicio y así poder obtener el id de la persona a la cual el usuario realizó click en la vista previa. Además inyectamos $http para poder hacer una request y obtener más datos de la persona. Para eso entonces creamos en la carpeta person-detail el archivo person-detail.template.html con el siguiente contenido:

	<div>
		<br>
		<div ng-if="$ctrl.error" style="color: red;">
			<span>{{$ctrl.error}}</span>
		</div>
		<div ng-if="$ctrl.persona">
			<div>
				<label>Nombre:</label>
				<span>{{$ctrl.persona.nombre}}</span>
			</div>
			<div>
				<label>Descripción:</label>
				<span>{{$ctrl.persona.descripcion}}</span>
			</div>
		</div>
	</div>

Y modificamos person-detail.component.js de la siguiente manera:

angular.module('personDetailModule', ['ngRoute']);

	angular.module('personDetailModule')
		.component('personDetail', {
			templateUrl: '/person-detail/person-detail.template.html',
			controller: ['$routeParams', '$http', function personDetail($routeParams, $http) {
				let url = 'person-detail/'+$routeParams.id+'.json';
				var ctrl = this;
				$http.get(url)
					.then(function(response) {
						ctrl.persona = response.data;
					}, function(error) {
						console.log('Ocurrió un error al recuperar los datos de la persona: ',error);
						ctrl.error = 'No se pudo recuperar los datos de la persona';
					});

			}]
		});

Si ahora ejecutamos la aplicación cuando hagamos click en alguna persona nos mostrará más detalles o bien un mensaje de error en caso de no poder obtener los datos de la misma.

------- hasta aquí incluido en commit "ngRoute" -------